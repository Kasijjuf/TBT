
	ooooooooooo oooooooooo	ooooooooooo
	88  888	 88  888    888 88  888	 88
	    888	     888oooo88	    888
	    888	     888    888	    888
	   o888o    o888ooo888	   o888o

		Time Based Text    v0.7

               http://tbt.dyne.org


  finger[k].start = j+2^{o+1} % (2^y);
  finger[k].interval = finger[k+1].flick - finger[k].flick;

Our objective here is to carry more information in written text.

The solution proposed: record performance time in text
and vehicle it as additional information.

Saving and reproducing every single action during the composition of a
text let us vehicle emphasis in written communication.

As this simple concept, our implementation is also kept very
minimalistic while we welcome programmers to embed it in communication
applications.

The implementation is written in thread-safe POSIX C++ and can be
ported to most platforms.





::::: COMPILE THE SOURCE

If you have a sane GNU/GCC compile environment[*] cd into the
sourcecode directory and type:

$ make

requirements are:

- C++ compiler
- C++ Standard Template Library
- S-Lang libraries (text console handling)

[*] GNU/Linux, BSD, Apple/OSX with XCode, CygWin with GCC




::::: VISIONS (so far)

- Mail client plugin (editor and viewer)
- ASCII Art, Poetry, Empathy
- TeleText (the next generation)
- Educational purposes
- Multipurpose granular time based protocol



::::: PROTOCOL

In the .tbt format, text is saved with a timestamp for each letter:

     _________ ___________ 
    |  u-int  |   u-int   |
    |  64bit  |   64bit   |    m-seconds = 1/1000 of a second
     --------- -----------
    |  char   | m-seconds |    char = ASCII or higher bit char code
     --------- -----------
    |    Total: 128bit    |
     ---------------------


However export to different formats is planned including generation of
web-ready code in HTML and Javascript, a daemon to provide timed input
thru a socket on the network (TCP/IP) and what not.

Input is captured from the console, but can be extended to intercept
any application using some h4x0r keylogging technique on different OS.


:::: TODO

In case of a multipurpose protocol for tagging time based events of
variable size and type, we should introduce the use of a header.
This might also help distinguishing among different key code maps.
With 0.7 development reached a sufficiently advanced status, following
some more debugging it will be tagged as 1.0 - so basically the change
of the protocol will be an aim for the development of TBT 2.0 .



::::: DISCLAIMER

TBT is Copyleft 2006 - 2007 by Jaromil & Jodi
artwork commissioned by the Impakt.nl festival
please refer to the included AUTHORS file for complete information.

This source code is free software; you can redistribute it and/or
modify it under the terms of the GNU Public License as published 
by the Free Software Foundation; either version 2 of the License,
or (at your option) any later version.

This source code is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
Please refer to the GNU Public License for more details.

You should have received a copy of the GNU Public License along with
this source code; if not, write to:
Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
